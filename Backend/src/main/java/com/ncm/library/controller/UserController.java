package com.ncm.library.controller;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
// import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.ncm.library.entity.User;
import com.ncm.library.service.UserService;
import com.ncm.library.dto.Message;

// @Controller // This means that this class is a Controller
// @RequestMapping(path="/library")
@RestController
@RequestMapping("/api/library/user")
@CrossOrigin(origins = "http://localhost:4200")
public class UserController {

  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserService userService;

  // @PostMapping(path="/add") // Map ONLY POST Requests
  // public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String surname
  //     , @RequestParam String email, @RequestParam String mobile, @RequestParam String address) {
  //   // @ResponseBody means the returned String is the response, not a view name
  //   // @RequestParam means it is a parameter from the GET or POST request

  //   User n = new User();
  //   n.setName(name);
  //   n.setSurname(surname);
  //   n.setEmail(email);
  //   n.setMobile(mobile);
  //   n.setAddress(address);
  //   userService.save(n);
  //   return "Saved";
  // }

  // @GetMapping(path="/all")
  // public @ResponseBody Iterable<User> getAllUsers() {
  //   // This returns a JSON or XML with the users
  //   return userRepository.findAll();
  // }

  @GetMapping("/all")
    public ResponseEntity<Iterable<User>> getAllUsers(){
        Iterable<User> people = userService.getAll();
        return new ResponseEntity<Iterable<User>>(people, HttpStatus.OK);
    }


  // PTE REVISAR CODIGO SOLO HE COPIADO Y PEGADO DEL EJEMPLO
  //  @GetMapping("/detalle/{id}")
  //   public ResponseEntity<user> getOne(@PathVariable Long id){
  //       if(!userService.existePorId(id))
  //           return new ResponseEntity(new Message("no existe ese user"), HttpStatus.NOT_FOUND);
  //       user user = userService.obtenerPorId(id).get();
  //       return new ResponseEntity<user>(user, HttpStatus.OK);
  //   }

    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    @PostMapping("/add")
    public ResponseEntity<?> create(@RequestBody User user){
        if(StringUtils.isBlank(user.getName()))
            return new ResponseEntity(new Message("el nombre es obligatorio"), HttpStatus.BAD_REQUEST);
        if(StringUtils.isBlank(user.getSurname()))
            return new ResponseEntity(new Message("el apellido es obligatorio"), HttpStatus.BAD_REQUEST);
        if(StringUtils.isBlank(user.getEmail()))
            return new ResponseEntity(new Message("el email es obligatorio"), HttpStatus.BAD_REQUEST);
        if(StringUtils.isBlank(user.getMobile()))
            return new ResponseEntity(new Message("el móvil es obligatorio"), HttpStatus.BAD_REQUEST);
        if(StringUtils.isBlank(user.getAddress()))
            return new ResponseEntity(new Message("el dirección es obligatoria"), HttpStatus.BAD_REQUEST);       
        // if(userService.existePorNombre(user.getEmail()))//
            // return new ResponseEntity(new Message("ese nombre ya existe"), HttpStatus.BAD_REQUEST);
        userService.save(user);
        return new ResponseEntity(new Message("usuario guardado"), HttpStatus.CREATED);
    }

  //   @PutMapping("/actualizar/{id}")
  //   public ResponseEntity<?> update(@RequestBody user user, @PathVariable("id") Long id){
  //       if(!userService.existePorId(id))
  //           return new ResponseEntity(new Message("no existe ese user"), HttpStatus.NOT_FOUND);
  //       if(StringUtils.isBlank(user.getNombreuser()))
  //           return new ResponseEntity(new Message("el nombre es obligatorio"), HttpStatus.BAD_REQUEST);
  //       if((Integer)user.getPrecio() == null || user.getPrecio()==0)
  //           return new ResponseEntity(new Message("el precio es obligatorio"), HttpStatus.BAD_REQUEST);
  //       if(userService.existePorNombre(user.getNombreuser()) &&
  //               userService.obtenerPorNombre(user.getNombreuser()).get().getId() != id)
  //           return new ResponseEntity(new Message("ese nombre ya existe"), HttpStatus.BAD_REQUEST);
  //       user prodUpdate = userService.obtenerPorId(id).get();
  //       prodUpdate.setNombreuser(user.getNombreuser());
  //       prodUpdate.setPrecio(user.getPrecio());
  //       userService.guardar(prodUpdate);
  //       return new ResponseEntity(new Message("user actualizado"), HttpStatus.CREATED);
  //   }

  //   @DeleteMapping("/delete/{id}")
  //   public ResponseEntity<?> delete(@PathVariable Long id){
  //       if(!userService.existePorId(id))
  //           return new ResponseEntity(new Message("no existe ese user"), HttpStatus.NOT_FOUND);
  //       userService.delete(id);
  //       return new ResponseEntity(new Message("user eliminado"), HttpStatus.OK);
  //   }
}
